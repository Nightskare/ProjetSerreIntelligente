// Importation des classes nécessaires
import org.eclipse.smarthome.model.script.ScriptServiceUtil
import org.eclipse.smarthome.core.library.items.StringItem


var Boolean TriggerLuminosite = true

rule "Changer l'état de EtatLumiere"
when
    Item EtatLumiere received command
then

    logInfo("EtatLumiere", "Commande reçue : " + receivedCommand)

    switch (receivedCommand as Number) { // Utilisation de receivedCommand pour traiter la commande reçue
        case 0: { // Mode Éteint
            logInfo("EtatLumiere", "État : OFF")
            LightDimmer.postUpdate(0) // Éteindre complètement
            LightDimmer.sendCommand(0)
            TriggerLuminosite = false
        }
        case 1: { // Mode Allumé
            logInfo("EtatLumiere", "État : ON")
            LightDimmer.postUpdate(100) // Allumer à pleine intensité
            LightDimmer.sendCommand(100)
            TriggerLuminosite = false
        }
        case 2: { // Mode Automatique
            logInfo("EtatLumiere", "État : Automatique")
            TriggerLuminosite = true // Active la gestion automatique
        }
    }
end


rule "Allume la lampe la nuit"
when
    Time cron "0 * * * * ?" // Exécute chaque minute pour tester
then
    if (TriggerLuminosite) {

        // Récupérer les états des éléments Sunset, Sunrise et CurrentTime
        val currentTime = now // Obtenir l'heure actuelle sous forme de ZonedDateTime
        val sunsetState = Sunset.state
        val sunriseState = Sunrise.state

        // Vérifier si les états de Sunset et Sunrise sont définis
        if (sunsetState instanceof DateTimeType && sunriseState instanceof DateTimeType) {
            val currentSunsetTime = (sunsetState as DateTimeType).zonedDateTime
            val currentSunriseTime = (sunriseState as DateTimeType).zonedDateTime

            logInfo("Lampe Nuit", "CurrentTime: " + currentTime + ", Current Sunset: " + currentSunsetTime + ", Current Sunrise: " + currentSunriseTime)

            // Vérifier si l'heure actuelle est entre le coucher et le lever du soleil
            if (currentTime.isAfter(currentSunsetTime) && currentTime.isBefore(currentSunriseTime)) {
                logInfo("Lampe Nuit", "Il fait nuit. Allumage de la lampe.")
                LightDimmer.postUpdate(100) // Allumer à pleine intensité
                LightDimmer.sendCommand(100)
            } else {            
                logInfo("Lampe Nuit", "Il fait jour. On doit donc tester la luminosité.")
                // Récupérer la valeur actuelle de la luminosité
                val luminance = MotionSensor_Luminance.state as Number
                // Définir le seuil de luminosité
                val seuil = 50
                // Vérifier si la luminosité est inférieure au seuil
                if (luminance < seuil) {
                    // Allumer la lampe à 100% de luminosité
                    LightDimmer.sendCommand(100)
                    logInfo("Règle Luminosité", "Luminosité basse détectée ({} lx), lampe allumée.", luminance)
                } else {
                    // Éteindre la lampe si la luminosité est suffisante
                    LightDimmer.sendCommand(0)
                    logInfo("Règle Luminosité", "Luminosité suffisante ({} lx), lampe éteinte.", luminance)
                }
            }
        } else {
            logWarn("Lampe Nuit", "Les états de Sunset ou Sunrise ne sont pas valides.")
        }
    } 
end



rule "Changer l'état de la lumière en fonction de l'MQTT"
when
    Channel "mqtt:broker:myBroker:udes713serreLightScenarioEtatLumiere" triggered
then
	var actionName = receivedEvent.toString
    var etat = transform("JSONPATH", "$.etat", actionName)

    logInfo("EtatLumiere", "Valeur de 'etat' reçue : " + etat)

    // Appliquer des actions en fonction de la valeur reçue
    switch (etat) {
        case "0": {
            logInfo("EtatLumiere", "État : OFF")
           EtatLumiere.postUpdate(0)
        }
        case "1": {
            logInfo("EtatLumiere", "État : ON")
            // Actions à effectuer pour allumer
            EtatLumiere.postUpdate(1) 
        }
        case "2": {
            logInfo("EtatLumiere", "État : Automatique")
            // Actions pour mode automatique
            EtatLumiere.postUpdate(2)
        }
    }
end




// Règle pour mettre à jour les valeurs de coucher et de lever du soleil
// La mise à jour doit se faire une fois que le lever du soleil soit passé
rule "Update Sunset and Sunrise times"
when
    Time cron "0 * * * * ?"  // Exécute chaque minute pour tester
then

    // Mise à jour de l'heure actuelle de référence
    CurrentTime.postUpdate(new DateTimeType())
    
    // Heure actuelle
    val currentTime = now

    // Récupération de l'état actuel de Sunset
    val sunsetState = Sunset.state
    val sunriseState = Sunrise.state
    if (sunsetState instanceof DateTimeType) {
        val sunsetTime = (sunsetState as DateTimeType).zonedDateTime
        val sunriseTime = (sunriseState as DateTimeType).zonedDateTime

        // Vérifie si le coucher de soleil est déjà passé
        if (currentTime.isAfter(sunriseTime)) {
            logInfo("Sunset/Sunrise Update", "Coucher de soleil dépassé ou mise à jour nécessaire.")
            
            // Mise à jour des horaires de lever et coucher du soleil
            val String response = sendHttpGetRequest("https://api.sunrisesunset.io/json?lat=45.40008&lng=-71.89908&time_format=24")
            
            if (response !== null && response !== "") {
                // Extraction des horaires de lever et coucher du soleil de la réponse JSON
                val sunset = transform("JSONPATH", "$.results.sunset", response)
                val sunrise = transform("JSONPATH", "$.results.sunrise", response)
                

                // Formatage des horaires avec la date actuelle pour obtenir un format ISO 8601
                val sunriseDate = LocalDate.now.plusDays(1).toString 
                val sunsetDate = LocalDate.now.toString

                val sunriseTimeString = sunriseDate + "T" + sunrise
                val sunsetTimeString = sunsetDate + "T" + sunset

                val sunriseTime = new DateTimeType(sunriseTimeString)
                val sunsetTime = new DateTimeType(sunsetTimeString)

                // Mise à jour des items avec les nouvelles valeurs
                Sunset.postUpdate(sunsetTime)
                Sunrise.postUpdate(sunriseTime)

                logInfo("Sunset/Sunrise Update", "Sunrise : " + Sunrise.state + ", Sunset : " + Sunset.state)
            }

            // Pas de réponse : on garde les valeurs précédentes
        } else {
            logInfo("Sunset/Sunrise Update", "Pas encore besoin de mise à jour.")
        }
    } else {
        // Si Sunset est NULL, on fait une mise à jour
        logInfo("Sunset/Sunrise Update", "Pas encore de données pour le coucher de soleil, initialisation.")

        // Mise à jour des horaires de lever et coucher du soleil
        val String response = sendHttpGetRequest("https://api.sunrisesunset.io/json?lat=45.40008&lng=-71.89908&time_format=24")
    
        // Vérification de la réponse et extraction des données JSON
        if (response !== null && response !== "") {
            
            // Extraction des horaires de lever et coucher du soleil de la réponse JSON
            val sunset = transform("JSONPATH", "$.results.sunset", response)
            val sunrise = transform("JSONPATH", "$.results.sunrise", response)
        
            // Formatage des horaires avec la date actuelle pour obtenir un format ISO 8601
            val sunriseDate = LocalDate.now.plusDays(1).toString 
            val sunsetDate = LocalDate.now.toString

            val sunriseTimeString = sunriseDate + "T" + sunrise
            val sunsetTimeString = sunsetDate + "T" + sunset

            val sunriseTime = new DateTimeType(sunriseTimeString)
            val sunsetTime = new DateTimeType(sunsetTimeString)

            // Mise à jour des items avec les nouvelles valeurs
            Sunset.postUpdate(sunsetTime)
            Sunrise.postUpdate(sunriseTime)

            logInfo("Sunset/Sunrise Update", "Sunrise : " + Sunrise.state + ", Sunset : " + Sunset.state)

        
        } else {
            // Valeurs par défaut pour l'initialisation
            val defaultSunset = "2024-11-30T17:30:00"
            val defaultSunrise = "2024-12-01T07:00:00"
        
            Sunset.postUpdate(new DateTimeType(defaultSunset))
            Sunrise.postUpdate(new DateTimeType(defaultSunrise))
        
            logError("Sunset/Sunrise Update", "Erreur lors de la récupération des données de lever et de coucher du soleil.")
        }
    } 
end


