// Importation des classes nécessaires
import org.eclipse.smarthome.model.script.ScriptServiceUtil
import org.eclipse.smarthome.core.library.items.StringItem
import java.util.ArrayList


var Boolean TriggerLuminosite = true

rule "Changer l'état de EtatLumiere"
when
    Item EtatLumiere received command
then
    switch (receivedCommand as Number) { // Utilisation de receivedCommand pour traiter la commande reçue
        case 0: { // Mode Éteint
            logInfo("EtatLumiere", "État : OFF")
            LightDimmer.postUpdate(0) // Éteindre complètement
            LightDimmer.sendCommand(0)
            TriggerLuminosite = false
        }
        case 1: { // Mode Allumé
            logInfo("EtatLumiere", "État : ON")
            LightDimmer.postUpdate(100) // Allumer à pleine intensité
            LightDimmer.sendCommand(100)
            TriggerLuminosite = false
        }
        case 2: { // Mode Automatique
            logInfo("EtatLumiere", "État : Automatique")
            TriggerLuminosite = true // Active la gestion automatique
        }
    }
end


rule "Allume la lampe la nuit"
when
    Time cron "0 * * * * ?" // Exécute chaque minute pour tester
then
    if (TriggerLuminosite) {
        logInfo("Lampe Nuit", "Vérification de l'heure actuelle.")

        // Récupérer les états des éléments Sunset, Sunrise et CurrentTime
        val currentTime = now // Obtenir l'heure actuelle sous forme de ZonedDateTime
        val sunsetState = Sunset.state
        val sunriseState = Sunrise.state

        // Vérifier si les états de Sunset et Sunrise sont définis
        if (sunsetState instanceof DateTimeType && sunriseState instanceof DateTimeType) {
            val sunsetTime = (sunsetState as DateTimeType).zonedDateTime
            val sunriseTime = (sunriseState as DateTimeType).zonedDateTime

            logInfo("Lampe Nuit", "CurrentTime: " + currentTime + ", Sunset: " + sunsetTime + ", Sunrise: " + sunriseTime)

            // Vérifier si l'heure actuelle est entre le coucher et le lever du soleil
            if (currentTime.isAfter(sunsetTime) && currentTime.isBefore(sunriseTime)) {
                LightDimmer.postUpdate(100) // Allumer à pleine intensité
                LightDimmer.sendCommand(100)
                logInfo("Lampe Nuit", "Il fait nuit. Allumage de la lampe à 50%.")
            } else {            
                logInfo("Lampe Nuit", "Il fait jour. On doit donc tester la luminosité.")
                // Récupérer la valeur actuelle de la luminosité
                val luminance = MotionSensor_Luminance.state as Number
                // Définir le seuil de luminosité
                val seuil = 50
                // Vérifier si la luminosité est inférieure au seuil
                if (luminance < seuil) {
                    // Allumer la lampe à 100% de luminosité
                    LightDimmer.sendCommand(100)
                    logInfo("Règle Luminosité", "Luminosité basse détectée ({} lx), lampe allumée.", luminance)
                } else {
                    // Éteindre la lampe si la luminosité est suffisante
                    LightDimmer.sendCommand(0)
                    logInfo("Règle Luminosité", "Luminosité suffisante ({} lx), lampe éteinte.", luminance)
                }
            }
        } else {
            logWarn("Lampe Nuit", "Les états de Sunset ou Sunrise ne sont pas valides.")
        }
    } 
end



rule "Update Sunset and Sunrise times"
when
    Time cron "0 * * * * ?"  // Exécute chaque minute pour tester
then
    // Appel à l'API externe pour obtenir les horaires de lever et coucher du soleil
    val String response = sendHttpGetRequest("https://api.sunrisesunset.io/json?lat=45.40008&lng=-71.89908&time_format=24")
    
    logInfo("Sunset/Sunrise Update", "API Response: " + response)

    // Vérification de la réponse et extraction des données JSON
    if (response !== null && response !== "") {
        // Extraction des horaires de lever et coucher du soleil
        val sunset = transform("JSONPATH", "$.results.sunset", response)
        val sunrise = transform("JSONPATH", "$.results.sunrise", response)
        
        logInfo("Sunset/Sunrise Update", "Sunset: " + sunset + ", Sunrise: " + sunrise)
        // Formatage des horaires pour obtenir un format valide


        // Obtention de la date actuelle
        val currentDate = LocalDate.now.toString 

        logInfo("Sunset/Sunrise Update", "Current Date: " + currentDate)
        
        // Formatage des horaires avec la date actuelle pour obtenir un format ISO 8601
        // Combine la date actuelle avec l'heure extraite de l'API
        val sunriseTimeString = currentDate + "T" + sunrise
        val sunsetTimeString = currentDate + "T" + sunset

        logInfo("Sunset/Sunrise Update", "Formatted Sunrise: " + sunriseTimeString + ", Formatted Sunset: " + sunsetTimeString)

        // Création des objets DateTimeType avec un format valide
        val sunriseTime = new DateTimeType(sunriseTimeString)
        val sunsetTime = new DateTimeType(sunsetTimeString)

        // Mise à jour des objets de l'interface utilisateur
        Sunset.postUpdate(sunsetTime)
        Sunrise.postUpdate(sunriseTime)
        
    } else {
        // Valeurs par défaut en cas d'échec de la récupération
        val defaultSunset = "2024-11-30T17:30:00"
        val defaultSunrise = "2024-12-01T07:00:00"
        
        Sunset.postUpdate(new DateTimeType(defaultSunset))
        Sunrise.postUpdate(new DateTimeType(defaultSunrise))
        
        logError("Sunset/Sunrise Update", "Erreur lors de la récupération des données de lever et de coucher du soleil.")
    }

    // Simulation de la mise à jour de l'heure actuelle
    CurrentTime.postUpdate(new DateTimeType())
end


