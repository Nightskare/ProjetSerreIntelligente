// import org.eclipse.smarthome.model.script.ScriptServiceUtil
// import org.eclipse.smarthome.core.library.items.StringItem
// import java.util.ArrayList

// Importation des classes nécessaires
import org.eclipse.smarthome.model.script.ScriptServiceUtil
import org.eclipse.smarthome.core.library.items.StringItem
import java.util.ArrayList
import org.json.JSONObject

// Déclaration du nom du fichier pour les logs
val TAG_FileName = "zwaves.rules"

// Règle pour le démarrage d'OpenHAB
rule "Démarrage de OpenHAB"
when
    System started
then
    logInfo(TAG_FileName, "Rule : Démarrage de OpenHAB")
    
    // Initialisation des états des objets Z-Wave
    DoorSensor_Binary.postUpdate(OFF)          // Capteur de porte
    MotionSensor_Binary.postUpdate(OFF)        // Capteur de mouvement
    MotionSensor_MotionAlarm.postUpdate(OFF)   // Alarme de mouvement
    LightDimmer.postUpdate(0)                  // Lampe éteinte
    Simulated_Lamp.postUpdate(OFF)             // Lampe simulée éteinte

    logInfo(TAG_FileName, "Tous les états des objets Z-Wave ont été initialisés.")
end

rule "Allumer la lampe si luminosité trop basse"
when
    Item MotionSensor_Luminance changed // La règle s'active lorsque la luminosité change
then
    // Récupérer la valeur actuelle de la luminosité
    val luminance = MotionSensor_Luminance.state as Number

    // Définir le seuil de luminosité
    val seuil = 50

    // Vérifier si la luminosité est inférieure au seuil
    if (luminance < seuil) {
        // Allumer la lampe à 100% de luminosité
        LightDimmer.sendCommand(100)
        logInfo("Règle Luminosité", "Luminosité basse détectée ({} lx), lampe allumée.", luminance)
    } else {
        // Éteindre la lampe si la luminosité est suffisante
        LightDimmer.sendCommand(0)
        logInfo("Règle Luminosité", "Luminosité suffisante ({} lx), lampe éteinte.", luminance)
    }
end

rule "Détection de sabotage et activation de l'alarme"
when
    Item DoorSensor_TamperAlarm changed to ON
then
    // Activer l'alarme simulée
    Simulated_Alarm.sendCommand(ON)
    logInfo("Règle Alarme", "Sabotage détecté ! Alarme activée.")

    // Envoyer une notification à l'application mobile
    sendNotification("malr2585@usherbrooke.ca","Alerte rouge","Sabotage détecté ! Vérifiez votre système immédiatement.")
    sendNotification("Sabotage détecté ! Vérifiez votre système immédiatement.")
end

rule "Désactivation de l'alarme"
when
    Item DoorSensor_TamperAlarm changed to OFF
then
    // Désactiver l'alarme simulée
    Simulated_Alarm.sendCommand(OFF)
    logInfo("Règle Alarme", "Sabotage terminé. Alarme désactivée.")
end
rule "Détecter la présence du téléphone"
when
    Item PhonePresence changed
then
    if (PhonePresence.state == ON) {
        logInfo("Présence", "Le téléphone est connecté au réseau.")
    } else {
        logInfo("Présence", "Le téléphone n'est plus connecté au réseau.")
    }
end

rule "Détection d'intrusion"
when
    Item PhoneConnected changed or  // Événement 1 : Changement d'état du téléphone (connecté/déconnecté)
    Item MotionSensor_MotionAlarm changed to ON // Événement 2 : Mouvement détecté
then
    // Si le téléphone est déconnecté et que le mouvement est détecté
    if (PhoneConnected.state == OFF && MotionSensor_MotionAlarm.state == ON) {
        // Activer l'alarme simulée
        Simulated_Alarm.sendCommand(ON)
        logInfo("Intrusion", "Intrusion détectée : téléphone absent et mouvement détecté.")

        // Envoyer une notification à l'application mobile OpenHAB
        sendNotification("malr2585@usherbrooke.ca","Intrusion détectée ! Téléphone absent et mouvement détecté.")
        sendNotification("Intrusion détectée ! Téléphone absent et mouvement détecté.")
    }
    
    // Si le téléphone se reconnecte, désactiver l'alarme
    if (PhoneConnected.state == ON) {
        Simulated_Alarm.sendCommand(OFF)
        logInfo("Présence", "Le téléphone est revenu à la maison. L'alarme est désactivée.")
    }
end



rule "Update Sunset and Sunrise times"
when
    Time cron "0 * * * * ?"  // Exécute chaque minute pour tester
then
    // Appel à l'API externe pour obtenir les horaires de lever et coucher du soleil
    val String response = sendHttpGetRequest("https://api.sunrisesunset.io/json?lat=45.40008&lng=-71.89908&time_format=24")
    
    logInfo("Sunset/Sunrise Update", "API Response: " + response)

    // Vérification de la réponse et extraction des données JSON
    if (response !== null && response !== "") {
        // Extraction des horaires de lever et coucher du soleil
        val sunset = transform("JSONPATH", "$.results.sunset", response)
        val sunrise = transform("JSONPATH", "$.results.sunrise", response)
        
        logInfo("Sunset/Sunrise Update", "Sunset: " + sunset + ", Sunrise: " + sunrise)
        // Formatage des horaires pour obtenir un format valide


        // Obtention de la date actuelle
        val currentDate = LocalDate.now.toString 

        logInfo("Sunset/Sunrise Update", "Current Date: " + currentDate)
        
        // Formatage des horaires avec la date actuelle pour obtenir un format ISO 8601
        // Combine la date actuelle avec l'heure extraite de l'API
        val sunriseTimeString = currentDate + "T" + sunrise
        val sunsetTimeString = currentDate + "T" + sunset

        logInfo("Sunset/Sunrise Update", "Formatted Sunrise: " + sunriseTimeString + ", Formatted Sunset: " + sunsetTimeString)

        // Création des objets DateTimeType avec un format valide
        val sunriseTime = new DateTimeType(sunriseTimeString)
        val sunsetTime = new DateTimeType(sunsetTimeString)

        // Mise à jour des objets de l'interface utilisateur
        Sunset.postUpdate(sunsetTime)
        Sunrise.postUpdate(sunriseTime)
        
    } else {
        // Valeurs par défaut en cas d'échec de la récupération
        val defaultSunset = "2024-11-30T17:30:00"
        val defaultSunrise = "2024-12-01T07:00:00"
        
        Sunset.postUpdate(new DateTimeType(defaultSunset))
        Sunrise.postUpdate(new DateTimeType(defaultSunrise))
        
        logError("Sunset/Sunrise Update", "Erreur lors de la récupération des données de lever et de coucher du soleil.")
    }

    // Simulation de la mise à jour de l'heure actuelle
    CurrentTime.postUpdate(new DateTimeType())
end


rule "Allume la lampe la nuit"
when
    Time cron "0 * * * * ?" // Exécute chaque minute pour tester
then
    logInfo("Lampe Nuit", "Vérification de l'heure actuelle.")

    // Récupérer les états des éléments Sunset, Sunrise et CurrentTime
    val currentTime = now // Obtenir l'heure actuelle sous forme de ZonedDateTime
    val sunsetState = Sunset.state
    val sunriseState = Sunrise.state

    // Vérifier si les états de Sunset et Sunrise sont définis
    if (sunsetState instanceof DateTimeType && sunriseState instanceof DateTimeType) {
        val sunsetTime = (sunsetState as DateTimeType).zonedDateTime
        val sunriseTime = (sunriseState as DateTimeType).zonedDateTime

        logInfo("Lampe Nuit", "CurrentTime: " + currentTime + ", Sunset: " + sunsetTime + ", Sunrise: " + sunriseTime)

        // Vérifier si l'heure actuelle est entre le coucher et le lever du soleil
        if (currentTime.isAfter(sunsetTime) && currentTime.isBefore(sunriseTime)) {
            // Allumer la lampe à 50% de luminosité
            Simulated_Lamp.postUpdate(ON)
            logInfo("Lampe Nuit", "Il fait nuit. Allumage de la lampe à 50%.")
        } else {            
            logInfo("Lampe Nuit", "Il fait jour. Pas besoin de forcer l'allumage de la lampe.")
        }
    } else {
        logWarn("Lampe Nuit", "Les états de Sunset ou Sunrise ne sont pas valides.")
    }
end



rule "Gestion de la serre en fonction de la température"
when
    Item Temperature changed
then
    val temp = Temperature.state as Number

    // Gestion de la ventilation
    if (temp > 20) {
        Vent.sendCommand(ON) // Ouvrir la serre
    } else {
        Vent.sendCommand(OFF) // Fermer la serre
    }

    // Gestion du chauffage
    if (temp < 5) {
        Heater.sendCommand(ON) // Allumer le chauffage
    } else {
        Heater.sendCommand(OFF) // Éteindre le chauffage
    }
end
